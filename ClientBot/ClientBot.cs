using Microsoft.Extensions.Options;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace ClientBot
{
    public class ClientBot
    {
        private readonly ITelegramBotClient botClient;
        private readonly ApiService _apiService;
        private static Dictionary<long, string> _userOrders = new(); // –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤

        public ClientBot(string token, ApiService apiService)
        {
            botClient = new TelegramBotClient(token);
            _apiService = apiService;
        }

        public void StartReceiving()
        {
            var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = new[] { UpdateType.Message, UpdateType.CallbackQuery }
            };

            botClient.StartReceiving(
                updateHandler: UpdateHandler,
                pollingErrorHandler: ErrorHandler,
                receiverOptions: receiverOptions
            );

            Console.WriteLine("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
            Console.ReadKey();
            Console.WriteLine("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        private async Task UpdateHandler(ITelegramBotClient client, Update update, CancellationToken token)
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ-–∑–∞–∫–∞–∑–æ–≤
            if (update.Message?.Photo != null)
            {
                var photoFileId = update.Message.Photo.Last().FileId;
                var userId = update.Message.From.Id;

                _userOrders[userId] = photoFileId;

                await botClient.SendTextMessageAsync(
                    chatId: update.Message.Chat.Id,
                    text: "üìù –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:",
                    replyMarkup: new ForceReplyMarkup { Selective = true },
                    cancellationToken: token
                );
                return;
            }

            if (update.Message?.ReplyToMessage != null && _userOrders.ContainsKey(update.Message.From.Id))
            {
                var orderDetails = update.Message.Text;
                var photoFileId = _userOrders[update.Message.From.Id];

                await SendOrderToAdmin(botClient, userId: update.Message.From.Id, photoFileId, orderDetails);
                _userOrders.Remove(update.Message.From.Id);
                return;
            }

            // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            var message = update.Message;
            if (message?.Text != null)
            {
                if (message.Text == "/start")
                {
                    string welcomeMessage = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Azrv_BOT..."; // –≤–∞—à —Ç–µ–∫—Å—Ç
                    var inlineKeyboard = new InlineKeyboardMarkup(new[]
                    {
                        new[] { InlineKeyboardButton.WithCallbackData("–ú–µ–Ω—é", "contact_manger") }
                    });
                    await botClient.SendTextMessageAsync(message.Chat.Id, welcomeMessage, replyMarkup: inlineKeyboard, cancellationToken: token);
                }
                // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
            }
            else if (update?.CallbackQuery != null)
            {
                await HandleCallbackQuery(botClient, update.CallbackQuery, token);
            }
        }

        private async Task SendOrderToAdmin(ITelegramBotClient botClient, long userId, string photoFileId, string orderDetails)
        {
            const long adminChatId = 8105555543; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∞

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", $"approve_{userId}"),
                    InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", $"reject_{userId}")
                }
            });

            await botClient.SendPhotoAsync(
                chatId: adminChatId,
                photo: InputFile.FromFileId(photoFileId),
                caption: $"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {userId}\nüìã –î–µ—Ç–∞–ª–∏: {orderDetails}",
                replyMarkup: keyboard
            );
        }

        private async Task HandleCallbackQuery(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken token)
        {
            var chatId = callbackQuery.Message?.Chat.Id;

            if (callbackQuery.Data == "contact_manger")
            {
                var menuKeyboard = new ReplyKeyboardMarkup(
                    new[]
                    {
                        new [] { new KeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"), new KeyboardButton("–£–∑–Ω–∞—Ç—å –ö—É—Ä—Å") },
                        new[] { new KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") },
                        new[] { new KeyboardButton("–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏")}
                    })
                {
                    ResizeKeyboard = true,
                    OneTimeKeyboard = false
                };

                await botClient.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:", replyMarkup: menuKeyboard, cancellationToken: token);
            }
            else if (callbackQuery.Data.StartsWith("approve_") || callbackQuery.Data.StartsWith("reject_"))
            {
                var userId = long.Parse(callbackQuery.Data.Split('_')[1]);
                var action = callbackQuery.Data.StartsWith("approve_") ? "–æ–¥–æ–±—Ä–µ–Ω" : "–æ—Ç–∫–ª–æ–Ω—ë–Ω";

                await botClient.SendTextMessageAsync(
                    chatId: userId,
                    text: $"–í–∞—à –∑–∞–∫–∞–∑ {action}!",
                    cancellationToken: token
                );

                await botClient.AnswerCallbackQueryAsync(
                    callbackQueryId: callbackQuery.Id,
                    text: $"–í—ã {action} –∑–∞–∫–∞–∑",
                    cancellationToken: token
                );
            }
        }

        private async Task ErrorHandler(ITelegramBotClient client, Exception exception, CancellationToken token)
        {
            Console.WriteLine("–û—à–∏–±–∫–∞ " + exception.Message);
            await Task.CompletedTask;
        }
    }
}